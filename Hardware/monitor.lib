; ===============================================
; KiddieOS - Monitor Library Rotines
; Created by Francis
; Version 1.0.0
; ===============================================

%IFNDEF __MONITOR_LIB__
%DEFINE __MONITOR_LIB__

; Main Strings __________________________________
; _______________________________________________

;NameSystem db "KiddieOS", 0

; _______________________________________________



; Monitor & Windows Configurations _________________________
; _______________________________________________


Count        dw 0000h
BackWidth    dw 0000h
BackHeight   dw 0000h
BackColor    db 30
Pagination   db 0
CursorCol    db 35
CursorRaw    db 15
State        db 0

; _______________________________________________



; Rotine Library ________________________________
; _______________________________________________

; Definir o modo de vídeo e configura posição padrão
VGA.SetVideoMode:
	mov 	ah, 00h
	mov 	al, 6Ah  	; <- (800 x 600) 16 cores = 6Ah
	;mov 	al, 12h    	; <- (640 x 480) 16 cores = 12h
	int 	10h
	mov 	ax, 800    ;640
	mov 	WORD[BackWidth], ax
	mov 	ax, 600    ;480
	mov 	WORD[BackHeight], ax
ret

SVGA.SetVideoMode:
	mov ax, 4F02h
	mov bx, 103h   	; <- (800 x 600) 256 cores = 103h
	;mov bx, 101h  	; <- (640 x 480) 256 cores = 101h
	int 10h
	mov ax, 800    ;640
	mov WORD[BackWidth], ax
	mov ax, 600    ;480
	mov WORD[BackHeight], ax
ret

;Pinta o fundo da tela
DrawBackground:
	mov ax, 0xA000
	mov es, ax
	;mov dx, 03C4h ; dx = Registro de Indice
	;mov ah, 0x01  ; Plano de bits azul
	;mov al, 0x02  ; Indice = Map Mask
	;out dx, ax    ; Escreve todos os planos de bits
	xor di, di
	mov ecx, ((800*600)/8)/4  ; = 60000 -> 15000 vezes
	mov eax, 0x00FFFF00  ; Escreva para cada 4 pixels
	;mov al, 0x02
	rep stosd            ; Preenche a tela
ret

PrintString:
	pusha
	mov ah, 09h
	mov bh, [Pagination]
	mov cx, 1
	mov al, [si]
	print:
		int 10h
		inc si
		call MoveCursor
		mov ah, 09h
		mov al, [si]
		cmp al, 0
		jne print
	popa
ret

MoveCursor:
	mov ah, 02h
	mov bh, [Pagination]
	inc dl
	int 10h
ret

EffectInit:
	mov bl, 44
	xor ax, ax
	xor cx, cx
	pusher:
		mov word[Count], 0
		push cx
		push ax
	start:
		mov dh, byte[CursorRaw]
		mov dl, byte[CursorCol]
		call MoveCursor
		pop ax
		push bx
		mov  bx, ax
		mov si, [Vector + bx]
		pop bx
		call PrintString
		push bx
		mov bl, [State]
		cmp bl, 0
		je Increment
		jmp Decrement
	Increment:
		pop bx
		inc bl
		call Waiting
		push ax
		cmp bl, 50
		jne start
		push bx
		mov bl, 1
		mov byte[State], bl
		pop bx
		jmp start
	Decrement:
		pop bx
		dec bl
		call Waiting
		push ax
		cmp bl, 44
		jne start
		push bx               
		mov bl, 0
		mov byte[State], bl
		mov bx, [Count]
		inc bx
		mov WORD[Count], bx
		cmp bx, 10 
		jne ReturnLoop
		jmp ReturnProg
	ReturnLoop:
		pop bx
		jmp start
	ReturnProg:
		pop bx
		pop ax
		pop cx
		add ax, 2
		inc cx
		cmp cx, SIZE
		jne pusher		
ret

Waiting:
	pusha
	mov ah, 86h
	mov cx, 0001h    ; 150 milisegundos (150.000) cx = 0002h, dx = 49F0h
	mov dx, 24F8h
	int 15h
	popa
ret

paint_line:
	pusha
	push 	es
	push	ax
	mov 	[sizetotal], bx
	mov   	ax, 0xA000
	mov   	es, ax
	mov   	ax, 320
	mov   	bx, dx
	xor   	dx, dx
	mul   	bx
	mov   	di, ax
	add   	di, cx
	pop 	ax
	cmp 	al, 0
	jz 		line_vert_intro
	call 	div_line
	line_vert_intro:
		mov 	cx, [partscnt]
	line_vert:
		push 	cx
		mov 	cx, [sizecurr]
		rep 	stosb
		mov 	cx, [sizecurr]
		add 	[sumpixels], cx
		pop 	cx
		sub 	di, 320
		loop 	line_vert
		mov 	cx, [sizetotal]
		sub 	cx, [partscnt]
		sub 	cx, [sumpixels]
		cmp 	cx, 0
		jz 		ret.paintline
		rep 	stosb
ret.paintline:
	mov 	word[sumpixels], 0
	pop 	es
	popa
ret

div_line:
	push 	ax
	xor 	dx, dx
	mov 	ax, [partscnt]
	;mov 	bx, 2
	;mul 	bx
	inc 	ax
	xor 	dx, dx
	mov 	[partscnt], ax
	mov 	bx, ax
	mov 	ax, [sizetotal]
	sub 	ax, bx
	div 	bx
	mov 	[sizecurr], ax
	pop 	ax
ret

sizetotal	dw 0
sizecurr	dw 0
partscnt	dw 1
sumpixels 	dw 0

some_paint:
  pusha
  push 	es
  push	ax
  mov   ax, 0xA000
  mov   es, ax
  mov   ax, 320
  mov   bx, dx
  xor   dx, dx
  mul   bx
  mov   di, ax
  add   di, cx
  pop 	ax
  paint_first:
    cld
    mov  cx, [sizey]
	rep  stosb
    mov  cx, [sizex]
    paintfl1:
	  mov 	[es:di], al
      add   di, 320
      loop  paintfl1
      std
      mov   cx, [sizey]
      rep   stosb
      mov   cx, [sizex]
	  cld
    paintfl2:
	  mov 	[es:di], al
      sub  di, 320
      loop  paintfl2
      cld
  pop 	es
  popa
ret

WaitTime:
	pusha
	mov 	ah, 86h
	mov 	dx, bx
	shr 	ebx, 16
	mov 	cx, bx
	int 	15h
	popa
ret

move_effect:
	mov 	[sizex], ch
	mov 	[sizey], cl
	mov 	[colorw], al
	mov 	[countm], dx
	push 	ebx
	xor 	cx, cx
	xor 	dx, dx
	mov 	bx, 320
	sub 	bx, [sizex]
	mov 	[posx], bx
	mov 	bx, 200
	sub 	bx, [sizey]
	mov 	[posy], bx
	pop 	ebx
effect:
	mov 	al, [colorw]
	call 	some_paint
	call 	WaitTime
	mov 	al, 0x00
	call 	some_paint
	
	cmp 	byte[inccx], 1
	jz 		inc_cx
dec_cx:
	dec 	cx
	cmp 	cx, 0
	jz 		chgcxinc
	jmp 	cmp_dx
inc_cx:
	inc 	cx
	cmp 	cx, [posx]
	jz 		chgcxdec
cmp_dx:
	cmp 	byte[incdx], 1
	jz 		inc_dx
dec_dx:
	dec 	dx
	cmp 	dx, 0
	jz 		chgdxinc
	jmp 	effect
inc_dx:
	inc 	dx
	cmp 	dx, [posy]
	jz 		chgdxdec
	jmp 	effect
	
chgcxinc:
	mov 	byte[inccx], 1
	call 	dec_count
	jc 		reteffect
	jmp 	inc_cx
chgdxinc:
	mov 	byte[incdx], 1
	call 	dec_count
	jc 		reteffect
	jmp 	inc_dx
chgcxdec:
	mov 	byte[inccx], 0
	call 	dec_count
	jc 		reteffect
	jmp 	dec_cx
chgdxdec:
	mov 	byte[incdx], 0
	call 	dec_count
	jc 		reteffect
	jmp 	dec_dx
	
dec_count:
	dec 	word[countm]
	cmp 	word[countm], 0
	jnz 	reteffect
	stc
	ret
reteffect:
	clc
	ret
sizex 	dw 0
sizey 	dw 0
colorw 	db 0
inccx 	db 1
incdx 	db 1
posx  	dw 0
posy  	dw 0
countm	dw 0

	
Effect_Screen_Rest:
	pusha
	mov 	ax, 13h
	int 	0x10

	mov 	ch, 50
	mov 	cl, 50
	mov 	al, 3
	mov 	dx, 15
	mov 	ebx, 12000
	call 	move_effect
	
	mov 	cx, 50
rotate_line:
	push 	cx
	mov 	cx, 50
	mov 	dx, 150
	mov 	al, 2
	mov 	bx, 250
	call 	paint_line
	mov 	ebx, 125000
	call 	WaitTime
	mov 	cx, 50
	mov 	dx, 150
	mov 	al, 0
	mov 	bx, 250
	call 	paint_line
	pop 	cx
	loop 	rotate_line
	popa
ret


LIB_Monitor32:

Print_String32:
	pushad
	push 	edx
	push 	ecx
	xor 	cx, cx
	xor 	eax, eax
	mov 	edi, 0xB8000
	mov 	dh, byte[CursorRaw]
	mov 	al, (80*2)
	mov 	cl, dh
	mul 	cl
	mov 	cl, byte[CursorCol]
	shl 	cl, 1
	add 	ax, cx
	add 	edi, eax
	pop 	ecx
	pop 	edx
Print_S:
    mov 	al,byte [ds:esi]
    mov 	byte [edi],al 
    inc 	edi 
    mov 	al, dl
    mov 	byte [edi],al 
	inc 	esi
	inc 	edi
	loop 	Print_S
	popad
	inc 	byte[CursorRaw]
iretd

; _______________________________________________

%ENDIF