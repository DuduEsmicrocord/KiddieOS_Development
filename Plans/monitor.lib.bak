;===================================================
;Ripy OS-Biblioteca de monitor by Rick V1.3
;===================================================


%IFNDEF _MONITOR_LIB__
%DEFINE _MONITOR_LIB__

;Vector Configuration
Vector:
	dw BootText1
	dw BootText2
	SIZE EQU ($ - Vector) / 2

;Window Configuration

StateBootText db 0
BackWidht dw 0000h
BackHeight dw 0000h
BackColor db 00 ;Cor de fundo
Pagination db 0
CursorX db 15
CursorY db 12
State db 0
;Window END

;Rotine lib
SetVideoModeVGA:
	mov ah, 00h
	mov al, 13h
	int 10h
	mov ax, 320
	mov WORD[BackWidht], ax
	mov ax, 200
	mov WORD[BackHeight], ax
	call DrawPixelConfig
ret

DrawPixelConfig:
	mov ah, 0Ch
	mov al, [BackColor]
	mov cx, 0
	mov dx, 0
ret

DrawBackground:
	int 10h
	inc cx
	cmp cx, WORD[BackWidht]
	jne DrawBackground
	mov cx, 0
	inc dx
	cmp dx, WORD[BackHeight]
	jne DrawBackground
	mov dx, 0
ret

PrintString:
	mov ah, 09h
	mov bh, [Pagination]
	mov cx, 1
	mov al, [si]
	print:
		int 10h
		inc si
		call MovCURSOR
		mov ah, 09h
		mov al, [si]
		cmp al, 0
		jne print
ret

MovCURSOR:
	mov ah, 02h
	mov bh, [Pagination]
	inc dl
	int 10h
ret

EffectInit:
	mov bl, 50
	xor ax, ax
	xor cx, cx
	pusher:
		push cx
		push ax
		start:
		mov dh, [CursorY]
		mov dl, [CursorX]
		call MovCURSOR
		pop ax
		push bx
		mov bx, ax
		mov si, [Vector + bx]
		pop bx
		call PrintString
		;pusha
		push bx
		mov bl, [State]
		cmp bl, 0
		je Increment
		jmp Decrement
		Increment:
	;		popa
			pop bx
			inc bl
			call WaitTime
			push ax
			cmp bl, 56
			jne start
			push bx
			;pusha
			mov bl, 1
			mov byte[State], bl
			pop bx
			;popa
			jmp start
		Decrement:
		;	popa
			pop bx
			dec bl
			call WaitTime
			push ax
			cmp bl, 50
			jne start
			push bx
		;	pusha
			mov bl, 0
			mov byte[State], bl
			mov bx, [CountPositions]
			inc bx
			mov WORD[CountPositions], bx
			cmp bx, 10;50 VM or 500 RV
			jne ReturnLoop
			jmp ReturnProg
			
		ReturnLoop:
			pop bx
			jmp start
		ReturnProg:
			pop bx
			pop ax
			pop cx 
			add ax, 2
			inc cx
			cmp cx, SIZE
			jne pusher
			
ret

WaitTime:
	pusha
	mov ah, 86h
	mov cx, 0002h
	mov dx, 49F0h
	int 15h
	popa
ret
	

;Rotine end

%ENDIF